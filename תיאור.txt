1)יצירת מנועים חדשים:
Engines myEngines(rightPlusPin, rightMinusPin, leftPlusPin, leftMinusPin);
myEngines  - שמו של זוג המנועים
rightPlusPin - הפין המקושר להדק ה+ של מנוע ימין על ידי הדוחף.
הדק ה+ של מנוע הוא הההדק שכאשר מחברים אותו לפלוס המנוע נוסע קדימה.
rightMinusPin - הפין המקושר להדק המינוס של המנוע.
leftPlusPin - הפין המקושר להדק הפלוס של המנוע השמאלי.
leftMinusPin - הפין המקושר להדק המינוס של המנוע השמאלי.
!!הערה חשובה: הפינים הנבחרים חייבים להיות פינים המסומנים בתלתל!!
(PWM)
הפינים המסומנים בתלתל בארדואינו אונו הם:
3,5,6,9,10,11,13

2)Drive(leftSpeed, rightSpeed)
באמצעות מתודה זו מסיעים את המנועים.
leftSpeed - המהירות בה יופעל מנוע שמאל
rightSpeed - המהירות בה יופעל מנוע ימין.
המהירות היא באחוזים.
העברת מהירות שלילית תגרום למנוע לנסוע אחורה.
myEngines.Drive(100,-100);
קריאה זו ^ תפעיל את מנוע ימין במאה אחוז קדימה, ואת מנוע שמאל במאה אחוז אחורה.

3)Change()
מתודה זו הופכת את כיוון המנועים.
myEngines.Change();

4)TurnOff()
מכבה את המנועים.
myEngines.TurnOff();

5)Break()
בולם את המנועים: מפעיל אותם לרגע בכיווון ההפוך כדי לעצור את התנועה באופן מיידי, ואז מכבה אותם.
myEngines.Break();

6)Speed()
מחזיר את מהירות הרובוט: ממוצע מהירות המנועים השונים.
מחזיר את מהירות הנסיעה הנוכחית.
int SpeedOfEngines = myEngines.Speed();
SpeedOfEngines - משתנה שלתוכו תוכנס מהירות המנועים.

7)Speed(add) // Acc(add) // Slow(add)
מתודות אלו משמשות לשינוי מהירות המנועים.
add - המהירות להוספה \ להורדה (באחוזים).
Slow - מאט את המנועים 
Acc - מאיץ (ממהר) את המנועים
ניתן להעביר ל 'האץ' מספר שלילי ואז הוא מתפקד כ'האט'. זה פחות נוח, לא לעשות זאת.
'האט' מאט את המהירות עד שהיא מגיעה לאפס. אם מאיטים עוד אחרי שהמהירות כבר נמצאת באפס, היא לא משתנה ונשארת על 0.
Speed - משנה את המהירות לפי המספר המועבר - חיובי להאצה, שלילי להאטה.
בניגוד למתודה 'האט', במתודה זו, אם מאיטים כאשר המהירות היא 0 המהירות הופכת שלילית והמנועים מתחילים לנסוע אחורה.
דוגמאות:
myEngines.Speed(15); //מאיץ את המהירות ב -15%
myEngines.Speed(-15); // מאט את המהירות ב 15%
myEngines.Acc(15); מאיץ את המהירות ב -15%
myEngines.Slow(15); // מאט את המהירות ב 15%

8) Forward() / Backward() / Turning()
Forward - מחזיר ערך אמת אם הרובוט מתקדם קדימה ושקר אם הוא לא.
Backward - מחזיר אמת אם הרובוט נוסע אחורה
Turning - מחזיר אמת אם הרובוט מסתובב
if(myEngines.Forward())
{
	*do somthing*
}
if(myEngines.Backward())
{
	*do somthing*
}
if(myEngines.Turning())
{
	*do somthing*
}

9)Slalom()
מסיע את הרובוט בסלאלום (גְלִישָׁה פְּתַלְתָלָה).
myEngines.Slalom();
ניתן להגדיר אורך, רוחב, כיוון פנייה התחלתי ומספר צעדים.
הקריאה המלאה למתודה היא:
myEngines.Slalom(Length, Width, TurnRight, Steps);
Lenght - אורך לולאה בסלאלום. מספר בין 1 ל 100.
Width - רוחב לולאה בסלאלום. מספר בין 1 ל 100.
TurnRight - אמת או שקר. כאשר זה אמת זה מציין שהסלאלום יתחיל בפנייה ימינה, וכאשר הוא שקר זה מציין שהוא יתחיל בפנייה שמאלה.
Steps - מספר הצעדים = לולאות בסלאלום. מספר גדול מאחד.

ניתן לקרוא למתודה גם בלי למלא את כל השדות הללו, באופנים הבאים:
	1)myEngines.Slalom(Length, Width, Steps); // במקרה זה לא הוגדר כיוון התחלתי, והוא יהיה ימינה כברירת מחדל.
    2)myEngines.Slalom(Length, Width, turnright); // במקרה זה לא הוגדרו מספר צעדים, ולכן יתבצע צעד אחד בלבד.
    3)myEngines.Slalom(Length, Width); //במקרה זה לא הוגדרו לא מספר צעדים ולא כיוון התחלתי. הכיוון ההתחלתי יהיה ימינה, ויתבצע צעד אחד.
    4)myEngines.Slalom(turnright); // יתבצע צעד אחד בכיוון שהוגדר, במימדי ברירת המחדל.
    5)myEngines.Slalom(Steps); // תתבצע צעידה במימדי ברירת המחדל, שתתחיל בצד ימין, ותימשך כמספר הפעמים שהוגדר.
	6)myEngines.Slalom(); // יתבצע צעד אחד, בכיוון ברירת המחדל (ימינה) ובמימדי ברירת המחדל.

10)Replace()
מתודה זו מחליפה את המנועים זה עם זה, כך שמעתה פקודות למנוע ימין יופעלו על מנוע שמאל ולהפך.
myEngines.Replace();
אם מפעילים את המתודה פעמיים, המנועים חוזרים למצבם המקורי.

11)DisReplace()
מתודה זו תבטל את פעולת המתודה הקודמת, ותיישר את המנועים בלי קשר למצבם.
myEngines.DisReplace();

***********
מתודות הניתנות להפעלה על מנוע אחד בלבד
כל המתודות שהוזכרו עד כה, ניתנות להפעלה גם על מנוע אחד בלבד.
(Turning למעט).
גישה אל המנוע תתבצע כך:
myEngines.Right / myEngines.Left
כך לדוגמא ניתן להפעיל את המתודות הקודמות על מנוע בודד:
myEngines.Right.Drive(100); / myEngines.Left.Drive(100);
myEngines.Right.Change(); / myEngines.Left.Change();
myEngines.Right.TurnOff(); / myEngines.Left.TurnOff();
myEngines.Right.Break(); / myEngines.Left.Break();
int S = myEngines.Right.Speed(); / int S = myEngines.Left.Speed();
myEngines.Right.Speed(15); / myEngines.Left.Speed(15);
if(myEngines.Right.Forward()) / if(myEngines.Left.Forward())
(הערה: המתודה אחרונה ^ מחזירה 'אמת' גם כאשר המנוע לא פועל.)
if(myEngines.Right.Backward()) / if(myEngines.Left.Backward())

כמו כן, ישנן מתודות נוספות הניתנות להפעלה רק על מנוע אחד:
11)Reverse()
כאשר מפעילים מתודה זו, היא גורמת לכל שאר הפקודות שמופעלות על המנוע לפעול הפוך:
(אם מסיעים את המנוע קדימה הוא ייסע אחורה)
זה למקרה שחיברת את אחד המנועים הפוך ואין לך כוח לשנות את החיבור או לשנות את התוכנה.
myEngines.Right.Reverse(); / myEngines.Left.Reverse();

12)Straight()
מתודה זו פועלת הפוך מהמתודה 'רוורס', והיא 'מיישרת' את המנוע.
myEngines.Right.Straight(); / myEngines.Left.Straight();